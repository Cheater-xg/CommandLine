//переменная хранит параметры конфигурации, нужные для функции определения объекта
Перем СтруктураОписанияКонфигурации;


&НаСервере
Функция ПолучитьКоманднуюСтрокуДляОбработки(КоманднаяСтрока)

	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПодготовитьФразуКОбработке(КоманднаяСтрока);
	
КонецФункции // ПолучитьКоманднуюСтрокуДляОбработки()

&НаСервере
Процедура ВыполнитьWSНаСервере(Результат, ТипРезультата, Атрибуты, Наборы, Расшифровка)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ОбработатьРезультатНаКлиенте(Результат, ТипРезультата, Атрибуты, Наборы, Расшифровка);	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОписанияКонфигурацииСервер()

	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПолучитьСтруктуруОписанияКонфигурации();	
	
КонецФункции // ПолучитьСтруктуруОписанияКонфигурацииСервер()

&НаКлиенте
Процедура ВыполнитьWS(Команда)
		
	//КоманднаяСтрокаДляОбработки = ПолучитьКоманднуюСтрокуДляОбработки(Объект.КоманднаяСтрока);
	КоманднаяСтрокаДляОбработки = ПодготовитьФразуКОбработке(Объект.КоманднаяСтрока);
	
	СтруктураОписанияКонфигурации = ПолучитьСтруктуруОписанияКонфигурацииСервер();
	
	//дефис тоже будем считать разделителем
	КоманднаяСтрокаДляОбработки = СтрЗаменить(КоманднаяСтрокаДляОбработки, "-", " ");
	//КоманднаяСтрокаДляОбработки = СтрЗаменить(КоманднаяСтрокаДляОбработки, " ", "_");
	
	// Создаем HTTPСоединение, указываем сервер
	Соединение = Новый HTTPСоединение("nocheat.herokuapp.com");
	
	ЗапросЕРП = Новый HTTPЗапрос("/api/easyrp/" + СтруктураОписанияКонфигурации.Solution + "/"
		+ СтруктураОписанияКонфигурации.Developer + "/" 
		+ СтруктураОписанияКонфигурации.Version + "/"
		+ "any" + "/"
		+ "1" + "/"
		+ КоманднаяСтрокаДляОбработки);
	
	ОтветСФ = Соединение.Получить(ЗапросЕРП);
	
	//ЭлементыФормы.Надпись16.Заголовок = ОтветСФ.получитьтелокакстроку();
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ОтветСФ.получитьтелокакстроку());
	РасшифровкаОтвета = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	//Если РасшифровкаОтвета.Количество() Тогда
	//	Возврат;
	//КонецЕсли;
	
	МассивНеразобранныхСлов = РасшифровкаОтвета.arrNotParsed;
	Если Объект.Обучаться И Объект.ЕстьОбластьРаботыПользователя И МассивНеразобранныхСлов.Количество() > 0 Тогда
		
		ОткрытьФормуОбучения = ВыполнитьОбучение(МассивНеразобранныхСлов);
		Если ОткрытьФормуОбучения Тогда 
			ФормаОбучения = НачатьОбучение(РасшифровкаОтвета); 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//------------------------
	//здесь неплохо-бы отправлять необученные слова на сервер, чтобы система обучалась и их становилось меньше
	//------------------------

	Если РасшифровкаОтвета.defs.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//НастройкиОбъекта = ОпределитьНастройкиОбъектаБазыДанных("", "");
	
	Значение = ОбработатьРезультатНаКлиенте(РасшифровкаОтвета.defs.result, РасшифровкаОтвета.defs.resultType, РасшифровкаОтвета.defs.attr, РасшифровкаОтвета.sets, РасшифровкаОтвета);	
	//ВыполнитьWSНаСервере(РасшифровкаОтвета.defs.result, РасшифровкаОтвета.defs.resultType, РасшифровкаОтвета.defs.attr, РасшифровкаОтвета.sets, РасшифровкаОтвета);	
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		Если ТипЗнч(Значение) = Тип("Структура") Тогда 
			ОткрытьФорму(Значение.ИмяФормы,,, Новый УникальныйИдентификатор); 
		Иначе 
			ПоказатьЗначение(, Значение);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция НачатьОбучение(РасшифровкаОтвета)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("РасшифровкаОтвета", РасшифровкаОтвета);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеОбучения", ЭтотОбъект, СтруктураПараметры);
	ОткрытьФорму("ВнешняяОбработка.КоманднаяСтрока.Форма.ФормаОбученияУправляемая",,,,,,ОписаниеОповещенияОЗакрытии);
	
КонецФункции // НачатьОбучение()

&НаКлиенте
Процедура ПослеОбучения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) 
		И РезультатЗакрытия Тогда // ожидаемое занчение - Истина
		РасшифровкаОтвета = ВыполнитьЗапросWS();
		
		Если РасшифровкаОтвета = Неопределено Тогда
			//ЭлементыФормы.Надпись16.Заголовок = "Сервер не отвечает";
		ИначеЕсли РасшифровкаОтвета.Количество() = 0 Тогда
			//ЭлементыФормы.Надпись16.Заголовок = "Фраза не распознана";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РасшифровкаОтвета) Или РасшифровкаОтвета.defs.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//НастройкиОбъекта = ОпределитьНастройкиОбъектаБазыДанных("", "");
	
	ВыполнитьWSНаСервере(РасшифровкаОтвета.defs.result, РасшифровкаОтвета.defs.resultType, РасшифровкаОтвета.defs.attr, РасшифровкаОтвета.sets, РасшифровкаОтвета);	
		
КонецПроцедуры // ПослеОбучения()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Обработка = РеквизитФормыВЗначение("Объект");
		
	Обработка.ТекущийГод 		= Год(ТекущаяДата());
	Обработка.ПрошлыйГод 		= Год(ТекущаяДата()) - 1;
	Обработка.СледующийГод		= Год(ТекущаяДата()) + 1;
	Обработка.ТекущийМесяц 	= Месяц(ТекущаяДата());
	Обработка.ПрошлыйМесяц 	= ?(Обработка.ТекущийМесяц = 1, 12, Обработка.ТекущийМесяц - 1);
	Обработка.СледующийМесяц	= ?(Обработка.ТекущийМесяц = 12, 1, Обработка.ТекущийМесяц + 1);
	Обработка.ТекущийДень		= День(ТекущаяДата());
	Обработка.ПрошлыйДень		= ?(Обработка.ТекущийДень = 1, Обработка.ПоследнийДеньМесяца(Объект.ПрошлыйМесяц, ?(Обработка.ТекущийМесяц = 1, Обработка.ПрошлыйГод, Обработка.ТекущийГод)), Обработка.ТекущийДень - 1);
	Обработка.СледующийДень	= ?(Обработка.ТекущийДень = Обработка.ПоследнийДеньМесяца(Обработка.ТекущийМесяц, Обработка.ТекущийГод), 1, Обработка.ТекущийДень + 1);
	
	Обработка.МассивСлов 			= Новый Массив;
	Обработка.МассивРазобран 		= Новый Массив;
	Обработка.МассивНеразобранныхСлов = Новый Массив;
	Обработка.МассивАналитика		= Новый Массив;
	Обработка.МассивПоказатели		= Новый Массив;
	Обработка.Словарь 				= Новый ТаблицаЗначений;
	Обработка.СловарьРазобранный	= Новый ТаблицаЗначений;
	Обработка.Тест					= Новый ТаблицаЗначений;
	Обработка.ОбластиУчета			= Новый ТаблицаЗначений;
	Обработка.ОпределениеОбъектов	= Новый ТаблицаЗначений;
	Обработка.ТаблицаПараметров		= Новый ТаблицаЗначений;
	Обработка.НастройкиОбъектов		= Новый ТаблицаЗначений;
	Обработка.ТаблицаДопАтрибутов	= Новый ТаблицаЗначений;
	
	
	//ЗначениеВРеквизитФормы(Новый ТаблицаЗначений, "Объект.Словарь");
	//ЗначениеВРеквизитФормы(Новый ТаблицаЗначений, "Объект.СловарьРазобранный");
	//ЗначениеВРеквизитФормы(Новый ТаблицаЗначений, "Объект.Тест");
	//ЗначениеВРеквизитФормы(Новый ТаблицаЗначений, "Объект.ОбластиУчета");
	//ЗначениеВРеквизитФормы(Новый ТаблицаЗначений, "Объект.ОпределениеОбъектов");
	//ЗначениеВРеквизитФормы(Новый ТаблицаЗначений, "Объект.ТаблицаПараметров");
	//ЗначениеВРеквизитФормы(Новый ТаблицаЗначений, "Объект.НастройкиОбъектов");
	//ЗначениеВРеквизитФормы(Новый ТаблицаЗначений, "Объект.ТаблицаДопАтрибутов");
	//
	//Объект.СтруктураОписанияКонфигурации = Новый Структура;
	
	СтруктураОписанияКонфигурации = Обработка.ПолучитьСтруктуруОписанияКонфигурации();
	//СтруктураОписанияКонфигурации.Вставить("Solution", 	Метаданные.Имя);
	//СтруктураОписанияКонфигурации.Вставить("Developer", Метаданные.Поставщик);
	//СтруктураОписанияКонфигурации.Вставить("Version", 	Лев(Метаданные.Версия, 3));
	//СтруктураОписанияКонфигурации.Вставить("EasyRP_ID", " ");	
	//ЗначениеВРеквизитФормы(СтруктураОписанияКонфигурации, "Объект.СтруктураОписанияКонфигурации");
	Обработка.СтруктураОписанияКонфигурации = СтруктураОписанияКонфигурации;
	
	//ЗначениеВДанныеФормы(Объект, "Объект");
	ЗначениеВРеквизитФормы(Обработка, "Объект");
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	//ОбластиУчета = РеквизитФормыВЗначение("Объект.ОбластиУчета", Тип("ТаблицаЗначений"));
	//ТаблицаПараметров = РеквизитФормыВЗначение("Объект.ТаблицаПараметров", Тип("ТаблицаЗначений"));
	//ТаблицаДопАтрибутов = РеквизитФормыВЗначение("Объект.ТаблицаДопАтрибутов", Тип("ТаблицаЗначений"));
	//
	//ОбластиУчета.Колонки.Добавить("ОбластьУчета");
	//ОбластиУчета.Колонки.Добавить("Коэф");
	//
	//ТаблицаПараметров.Колонки.Добавить("Параметр");
	//ТаблицаПараметров.Колонки.Добавить("Наименование");
	//ТаблицаПараметров.Колонки.Добавить("Тип");
	//ТаблицаПараметров.Колонки.Добавить("Обработан");
	//
	//ТаблицаДопАтрибутов.Колонки.Добавить("ИмяАтрибута");
	//ТаблицаДопАтрибутов.Колонки.Добавить("ВидСравнения");
	//ТаблицаДопАтрибутов.Колонки.Добавить("ИмяЗначения");
	//	
	////ЗначениеВРеквизитФормы(ТаблицаПараметров, "Объект.ТаблицаПараметров");
	//ЗначениеВДанныеФормы(ТаблицаПараметров, Объект.ТаблицаПараметров);
	//ЗначениеВДанныеФормы(ТаблицаДопАтрибутов, Объект.ТаблицаДопАтрибутов);
	//ЗначениеВДанныеФормы(ОбластиУчета, Объект.ОбластиУчета);
	
	//ЭлементыФормы.КоманднаяПанель1.Кнопки.Энтер.СочетаниеКлавиш = БыстрыйВызов(13);
	
	Обучаться = Истина;
	ЕстьОбластьРаботыПользователя = Истина;
	Попытка
		РегистрОбластиПользователя = РегистрыСведений["пп_ИсторияРаботыПользователя"];
	Исключение	
		Обучаться = Ложь;
		ЕстьОбластьРаботыПользователя = Ложь;
	КонецПопытки;
	
	Объект.Обучаться = Обучаться;
	Объект.ЕстьОбластьРаботыПользователя = ЕстьОбластьРаботыПользователя;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаСервере
//КЛИЕНТ
Функция ВыполнитьЗапросWS()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	КоманднаяСтрокаДляОбработки = Обработка.ПодготовитьФразуКОбработке(Объект.КоманднаяСтрока);
	
	СтруктураОписанияКонфигурации = ПолучитьСтруктуруОписанияКонфигурацииСервер();
	
	//дефис тоже будем считать разделителем
	КоманднаяСтрокаДляОбработки = СтрЗаменить(КоманднаяСтрокаДляОбработки, "-", " ");
	//КоманднаяСтрокаДляОбработки = СтрЗаменить(КоманднаяСтрокаДляОбработки, " ", "_");
	
	// Создаем HTTPСоединение, указываем сервер
	Соединение = Новый HTTPСоединение("nocheat.herokuapp.com");
	
	ЗапросЕРП = Новый HTTPЗапрос("/api/easyrp/" + СтруктураОписанияКонфигурации.Solution + "/"
		+ СтруктураОписанияКонфигурации.Developer + "/" 
		+ СтруктураОписанияКонфигурации.Version + "/"
		+ "any" + "/"
		+ "1" + "/"
		+ КоманднаяСтрокаДляОбработки);
		
	Попытка
		ОтветСФ = Соединение.Получить(ЗапросЕРП);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	//ЭлементыФормы.Надпись16.Заголовок = ОтветСФ.получитьтелокакстроку();
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ОтветСФ.получитьтелокакстроку());
	РасшифровкаОтвета = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат РасшифровкаОтвета;
	
КонецФункции

&НаСервере
//КЛИЕНТ
Функция ВыполнитьОбучение(МассивНеразобранныхСлов) Экспорт 
	
	//Обработка = РеквизитФормыВЗначение("Объект");
	ТаблицаПараметров = ДанныеФормыВЗначение(Объект.ТаблицаПараметров, Тип("ТаблицаЗначений"));
	//ТаблицаОбучения = ДанныеФормыВЗначение(Объект.ТаблицаОбучения, Тип("ТаблицаЗначений"));
	ОткрытьФормуОбучения = Ложь;
	
	//проверим что этих слов нет в истории пользователя
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	пп_ИсторияРаботыПользователя.Объект,
	               |	пп_ИсторияРаботыПользователя.Наименование
	               |ИЗ
	               |	РегистрСведений.пп_ИсторияРаботыПользователя КАК пп_ИсторияРаботыПользователя
	               |ГДЕ
	               |	пп_ИсторияРаботыПользователя.Наименование В(&МассивСлов)";
	               //|	И пп_ИсторияРаботыПользователя.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("МассивСлов", МассивНеразобранныхСлов);
	//Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	Результат = Запрос.Выполнить().Выбрать();
	
	МассивСтрокОчистить = Новый Массив;
	
	Пока Результат.Следующий() Цикл
		ИндексУдалить = МассивНеразобранныхСлов.Найти(Результат.Наименование);
		МассивСтрокОчистить.Добавить(ИндексУдалить);
		
		НовыйПарам = ТаблицаПараметров.Добавить();
		НовыйПарам.Наименование = Результат.Наименование;
		НовыйПарам.Параметр = Результат.Объект;
	КонецЦикла;
	
	Для Каждого Элем ИЗ МассивСтрокОчистить Цикл
		МассивНеразобранныхСлов.Удалить(Элем);
	КонецЦикла;
	
	//проверим что этих слов нет в параметрах
	Для Каждого Элем Из МассивНеразобранныхСлов Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Наименование", Элем);
		НайденВПараметрах = ТаблицаПараметров.НайтиСтроки(СтруктураОтбора);
		Если НайденВПараметрах.Количество() > 0 Тогда    	
			Продолжить;				
		КонецЕсли;
		НовПарам = Объект.ТаблицаОбучения.Добавить();
		НовПарам.Параметр = Элем;			
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТаблицаПараметров, Объект.ТаблицаПараметров);
	//ЗначениеВДанныеФормы(ТаблицаОбучения, Объект.ТаблицаОбучения);
	
	Если Объект.ТаблицаОбучения.Количество() > 0 Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Возврат ОткрытьФормуОбучения;
	
КонецФункции


/////////////////////////////////////////////

//КЛИЕНТ
//готовит фразу к обработке: заменяет термины из базы ключевыми словами
&НаСервере
Функция ПодготовитьФразуКОбработке(ТекСтрока) Экспорт 
	
	КоманднаяСтрокаДляОбработки = НРег(ТекСтрока);
	
	//попробуем найти параметры из истории пользователя
	Если Объект.ЕстьОбластьРаботыПользователя Тогда
		ПрочитатьПоОбластиПользователя(КоманднаяСтрокаДляОбработки);
	КонецЕсли;
	
	ТаблицаПараметров = ДанныеФормыВЗначение(Объект.ТаблицаПараметров, Тип("ТаблицаЗначений"));
	
	//проверим соответствие таблицы параметров строке
	//могут быть лишние параметры если было подобрано слово автовводом из области пользователя, а потом строка была отредактирована и параметр был удален из строки
	ТаблицаПараметров.ЗаполнитьЗначения(Ложь, "Обработан");         
	//в таблице параметров могут оказаться дубли строк, избавимся от них
	ТаблицаПараметров.Свернуть("Параметр,Наименование,Тип,Обработан");
	МассивСтрокОчистить = Новый Массив;
	Для Каждого СтрПараметра Из ТаблицаПараметров Цикл
		Если Найти(КоманднаяСтрокаДляОбработки, СтрПараметра.Наименование) = 0 И СтрПараметра.Обработан = Ложь Тогда
			МассивСтрокОчистить.Добавить(СтрПараметра);
		Иначе
			//может быть несколько параметров к одному слову: например проект и контрагент называются одинаково
			//отправим в строку все эти параметры
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Наименование", СтрПараметра.Наименование);
			СтрокиПоПараметру = ТаблицаПараметров.НайтиСтроки(СтруктураОтбора);
			СтрокаПараметров = "";
			Для Каждого СтрокаПараметраПоНаименованию ИЗ СтрокиПоПараметру Цикл
				ИмяТипа = СтрокаПараметраПоНаименованию.Тип;
				Если ТипЗнч(СтрокаПараметраПоНаименованию.Параметр) = Тип("СправочникСсылка.Контрагенты") Тогда
					//Если СтрокаПараметраПоНаименованию.Параметр.Покупатель И НЕ СтрокаПараметраПоНаименованию.Параметр.Поставщик Тогда
					//	ИмяТипа = "покупатель";
					//ИначеЕсли СтрокаПараметраПоНаименованию.Параметр.Поставщик И НЕ СтрокаПараметраПоНаименованию.Параметр.Покупатель Тогда
					//	ИмяТипа = "поставщик";
					//КонецЕсли;
				КонецЕсли;
				СтрокаПараметров = СтрокаПараметров + "[param~" + ИмяТипа + "] ";
				СтрокаПараметраПоНаименованию.Обработан = Истина;  	//эту строку не удалять
			КонецЦикла;
			КоманднаяСтрокаДляОбработки = СтрЗаменить(КоманднаяСтрокаДляОбработки, СтрПараметра.Наименование, СокрЛП(СтрокаПараметров));
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого Элем Из МассивСтрокОчистить Цикл
		ТаблицаПараметров.Удалить(Элем);
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТаблицаПараметров, Объект.ТаблицаПараметров);
	МассивСтрокОчистить.Очистить();	
	
	Возврат КоманднаяСтрокаДляОбработки;
	
КонецФункции

&НаСервере
//КЛИЕНТ
//обрабатывает строку и выделяет из нее параметры которые есть в области пользователя
Процедура ПрочитатьПоОбластиПользователя(ТекСтрока) Экспорт 
		
	МассивСлов = РазложитьСтроку(ТекСтрока);
	
	ТаблицаПараметров = ДанныеФормыВЗначение(Объект.ТаблицаПараметров, Тип("ТаблицаЗначений"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	пп_ИсторияРаботыПользователя.Слово0 КАК Слово0,
	               |	пп_ИсторияРаботыПользователя.Слово1 КАК Слово1,
	               |	пп_ИсторияРаботыПользователя.Слово2 КАК Слово2,
	               |	пп_ИсторияРаботыПользователя.Слово3 КАК Слово3,
				   |	пп_ИсторияРаботыПользователя.Слово3 КАК Слово4,
				   |	пп_ИсторияРаботыПользователя.Слово3 КАК Слово5,
				   |	пп_ИсторияРаботыПользователя.Слово3 КАК Слово6,
				   |	пп_ИсторияРаботыПользователя.Объект,
	               |	пп_ИсторияРаботыПользователя.Наименование КАК Наименование,
	               |	пп_ИсторияРаботыПользователя.Тип
	               |ИЗ
	               |	РегистрСведений.пп_ИсторияРаботыПользователя КАК пп_ИсторияРаботыПользователя
	               |ГДЕ
	               |	пп_ИсторияРаботыПользователя.Слово0 В(&Слово0)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	Запрос.УстановитьПараметр("Слово0", МассивСлов);
	СловарьОбластиПользователя = Запрос.Выполнить().Выгрузить();
	
	ТекИндекс = 0;
	КоличествоСлов = МассивСлов.Количество();
	СтрокаНайдена = "";
	ИндексВФразеСловаря = 0;
	ИндексВСловаре = 0;
	ИндексВСловареНайден = 0;
	ИндексНачалаФразы = 0;
	ИндексТочноеСовпадение = 0;
	КоличествоСловВТерминах = 7;
	КоличествоСловВСловаре = СловарьОбластиПользователя.Количество();
	КоличествоСловВТермине = 0;
	
	//проходим в цикле слова фразы и проверяем их в области пользователя
	Пока ТекИндекс < КоличествоСлов Цикл
		ТекСлово = МассивСлов[ТекИндекс];
		
		Если ИндексВФразеСловаря = 0 Тогда
				Термин = СловарьОбластиПользователя.Найти(ТекСлово, "Слово0");
				Если Термин <> Неопределено Тогда
					СтрокаНайдена = ТекСлово;
					ИндексВФразеСловаря = 1;
					ИндексВСловаре = СловарьОбластиПользователя.Индекс(Термин);
					ИндексВСловареНайден = ИндексВСловаре;
					Если Термин.Слово1 = "" Тогда             		//в словаре есть термин совпадающий с ТекСловом
						ИндексТочноеСовпадение = ИндексВСловаре;
					Иначе                                          
						ИндексТочноеСовпадение = -1;                //в словаре пока не нашли совпадающий термин
					КонецЕсли;
					ИндексНачалаФразы = ТекИндекс;
					КоличествоСловВТермине = 1;
					ТекИндекс = ТекИндекс + 1;
					Если ТекИндекс = КоличествоСлов И ИндексТочноеСовпадение >= 0 Тогда
						//если с этим же наименованием есть другие параметры (например Контрагент и Проект могут называться одинаково)
						//тогда добавим все эти термины
						//в противном случае добавится один термин
						ДопИндекс = ИндексТочноеСовпадение;
						Пока ДопИндекс < КоличествоСловВСловаре 
								И СловарьОбластиПользователя[ДопИндекс].Наименование = СловарьОбластиПользователя[ИндексТочноеСовпадение].Наименование Цикл
							НовПараметр = ТаблицаПараметров.Добавить();
							НовПараметр.Параметр 		= СловарьОбластиПользователя[ДопИндекс].Объект;
							НовПараметр.Наименование	= СловарьОбластиПользователя[ДопИндекс].Наименование;
							НовПараметр.Тип 			= СловарьОбластиПользователя[ДопИндекс].Тип;
							ДопИндекс = ДопИндекс + 1;
						КонецЦикла;
					КонецЕсли;
				Иначе
					ТекИндекс = ТекИндекс + 1;
				КонецЕсли;		
			
		Иначе
			ИзменилсяИндексВСловаре = Ложь;
			Пока ТекИндекс < КоличествоСлов И ИндексВФразеСловаря < КоличествоСловВТерминах Цикл
				ТекСлово = МассивСлов[ТекИндекс];
				ТекСловоСловаря = СловарьОбластиПользователя[ИндексВСловаре][ИндексВФразеСловаря];
				
				ИндексПоиска = 0;
				ЕстьВСловаре = Истина;
				Пока ИндексПоиска < ИндексВФразеСловаря И ИзменилсяИндексВСловаре Цикл
					Если МассивСлов[ИндексНачалаФразы + ИндексПоиска] <> СловарьОбластиПользователя[ИндексВСловаре][ИндексПоиска] Тогда
						ЕстьВСловаре = Ложь;
						Прервать;
					КонецЕсли;
					ИндексПоиска = ИндексПоиска + 1;
				КонецЦикла;
				
				ИзменилсяИндексВСловаре = Ложь;
				
				Если ТекСловоСловаря < ТекСлово И ЕстьВСловаре Тогда  	//если 
					ИндексВСловаре = ИндексВСловаре + 1;
					ИзменилсяИндексВСловаре = Истина;
					Если ИндексВСловаре = КоличествоСловВСловаре Тогда    //дошли до последнего слова словаря
						Если ИндексТочноеСовпадение >= 0 Тогда
							НовПараметр = ТаблицаПараметров.Добавить();
							НовПараметр.Параметр 		= СловарьОбластиПользователя[ИндексТочноеСовпадение].Объект;
							НовПараметр.Наименование	= СловарьОбластиПользователя[ИндексТочноеСовпадение].Наименование;
							НовПараметр.Тип 			= СловарьОбластиПользователя[ИндексТочноеСовпадение].Тип;
							
							СтрокаНайдена = "";
							ИндексВФразеСловаря = 0;
							//ТекИндекс = ТекИндекс + 1;
						Иначе
							
							ИндексВФразеСловаря = 0;
							ТекИндекс = ИндексНачалаФразы + 1;	
						КонецЕсли;
					
						Прервать;
						
					КонецЕсли;
				ИначеЕсли ТекСловоСловаря = ТекСлово Тогда
					СтрокаНайдена = СтрокаНайдена + " " + ТекСлово;
					ИндексВФразеСловаря = ИндексВФразеСловаря + 1;
					ТекИндекс = ТекИндекс + 1;
					Если ИндексВФразеСловаря = КоличествоСловВТерминах 	//дошли до конца термина (достигли максимальной длины терминов)
							ИЛИ ТекИндекс = КоличествоСлов Тогда		//дошли до конца фразы
						НовПараметр = ТаблицаПараметров.Добавить();
						НовПараметр.Параметр 		= СловарьОбластиПользователя[ИндексВСловаре].Объект;
						НовПараметр.Наименование	= СловарьОбластиПользователя[ИндексВСловаре].Наименование;
						НовПараметр.Тип 			= СловарьОбластиПользователя[ИндексВСловаре].Тип;
						
						СтрокаНайдена = "";
						ИндексВФразеСловаря = 0;
						Прервать;
					ИначеЕсли СловарьОбластиПользователя[ИндексВСловаре][ИндексВФразеСловаря] = "" Тогда   //дошли до последнего слова термина
						ИндексТочноеСовпадение = ИндексВСловаре;
						ИндексВСловареНайден = ИндексВСловаре;	
						КоличествоСловВТермине = ИндексВФразеСловаря;	
					КонецЕсли;
				Иначе
					Если ИндексТочноеСовпадение >= 0 Тогда
						НовПараметр = ТаблицаПараметров.Добавить();
						НовПараметр.Параметр 		= СловарьОбластиПользователя[ИндексТочноеСовпадение].Объект;
						НовПараметр.Наименование	= СловарьОбластиПользователя[ИндексТочноеСовпадение].Наименование;
						НовПараметр.Тип 			= СловарьОбластиПользователя[ИндексТочноеСовпадение].Тип;
						
						СтрокаНайдена = "";
						ИндексВФразеСловаря = 0;
						ТекИндекс = ИндексНачалаФразы + КоличествоСловВТермине;
					Иначе
						ИндексВФразеСловаря = 0;
						ТекИндекс = ИндексНачалаФразы + 1;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;		
		
		КонецЕсли;
		
		//ТекИндекс = ТекИндекс + 1;
	КонецЦикла;		
	
	ЗначениеВДанныеФормы(ТаблицаПараметров, Объект.ТаблицаПараметров);

КонецПроцедуры

&НаСервере
//КЛИЕНТ
//процедура выполняет все действия на клиенте согласно переданным параметрам
Функция ОбработатьРезультатНаКлиенте(Результат, ВидРезультата, ДопАтрибуты, НастройкиОбъекта, СтруктураПараметров) Экспорт
	
	ОтборСобственные 	= СтруктураПараметров.filterOwn;	
	ГодС 				= СтруктураПараметров.yearS;	
	ГодПо 				= СтруктураПараметров.yearPo;	
	МесяцС 				= СтруктураПараметров.monthS;	
	МесяцПо 			= СтруктураПараметров.monthPo;	
	ДеньС 				= СтруктураПараметров.dayS;	
	ДеньПо 				= СтруктураПараметров.dayPo;	
	НомерОбъекта		= СтруктураПараметров.objNum;
	ВидСортировки		= СтруктураПараметров.sortType;
	ФразаДействие		= СтруктураПараметров.phAction;
	
	МассивПоказатели			= СтруктураПараметров.arrIndex;
	ОпределенныеПоказатели 		= СтруктураПараметров.defsIndex;//arrIndex;
	МассивАналитика				= СтруктураПараметров.arrAn;
	МассивНеобходимыхПараметров	= СтруктураПараметров.arRequiredParam;
			
	//заполним таблицу доп. атрибутов полученных с сервера
	ЗаполнитьТаблицуДопАтрибутов(ДопАтрибуты);
	
	ТаблицаДопАтрибутов = ДанныеФормыВЗначение(Объект.ТаблицаДопАтрибутов, Тип("ТаблицаЗначений"));
	ТаблицаПараметров = ДанныеФормыВЗначение(Объект.ТаблицаПараметров, Тип("ТаблицаЗначений"));
	ТекПользователь = Пользователи.ТекущийПользователь(); //глЗначениеПеременной("глТекущийПользователь");
	
	//обработаем объект
	//------------------------------------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------если это ОТЧЕТ------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------------------------------------
	Если ВидРезультата = "отчет" Тогда
		Попытка
			ТекОтчет = Отчеты[Результат].Создать();
		Исключение
			Сообщить("Отчет " + Результат + " не найден!");
			Возврат Неопределено;
		КонецПопытки;
		ТекФормаОтчета = ТекОтчет.ПолучитьФорму();
		ТекФормаОтчета.Открыть();
		
		МетаданныеОтчета = ТекОтчет.Метаданные();
		Построитель = Неопределено;	
		СхемаКомпоновкиДанных = Неопределено;
		КомпоновщикНастроек = Неопределено;
		
		//------------------------------------------------заполним ПЕРИОД отчета------------------------------------------------
		Если Найти(ДопАтрибуты, "&ДатаС") = 0 ИЛИ Найти(ДопАтрибуты, "&ДатаПо") = 0 Тогда	
		//если в доп атрибутах указан период, значит период используем не для отчета, а для параметров отчета которые прописаны в ДопАтрибутах; 
		//если нужно и для отчета тоже то нужно прописать в доп. атрибутах отдельно
		//в данном случае период не указан в атрибутах поэтому применяем его к отчету
			
			Если МетаданныеОтчета.Реквизиты.Найти("УниверсальныйОтчет") <> Неопределено Тогда			
				ТекОтчет.УниверсальныйОтчет.ДатаНач = ПолучитьПериод(ГодС, МесяцС, ДеньС);
				ТекОтчет.УниверсальныйОтчет.ДатаКон = ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина);
			ИначеЕсли МетаданныеОтчета.Реквизиты.Найти("ОбщийОтчет") <> Неопределено Тогда			
				ТекОтчет.ЗаполнитьНачальныеНастройки();
				ТекОтчет.ОбщийОтчет.ДатаНач = ПолучитьПериод(ГодС, МесяцС, ДеньС);
				ТекОтчет.ОбщийОтчет.ДатаКон = ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина);
			Иначе
				Если МетаданныеОтчета.Реквизиты.Найти("ДатаНачала") <> Неопределено Тогда
					ТекОтчет.ДатаНачала = ПолучитьПериод(ГодС, МесяцС, ДеньС);
				КонецЕсли;
				Если МетаданныеОтчета.Реквизиты.Найти("ДатаКонца") <> Неопределено Тогда
					ТекОтчет.ДатаКонца = ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина);
				КонецЕсли;
				Если МетаданныеОтчета.Реквизиты.Найти("ДатаНач") <> Неопределено Тогда
					ТекОтчет.ДатаНачала = ПолучитьПериод(ГодС, МесяцС, ДеньС);
				КонецЕсли;
				Если МетаданныеОтчета.Реквизиты.Найти("ДатаКон") <> Неопределено Тогда
					ТекОтчет.ДатаКонца = ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//------------------------------------------------найдем ПОСТРОИТЕЛЬ отчета------------------------------------------------
		Если МетаданныеОтчета.Реквизиты.Найти("УниверсальныйОтчет") <> Неопределено Тогда			
			Построитель = ТекОтчет.УниверсальныйОтчет.ПостроительОтчета;
		ИначеЕсли МетаданныеОтчета.Реквизиты.Найти("ОбщийОтчет") <> Неопределено Тогда			
			Построитель = ТекОтчет.ОбщийОтчет.ПостроительОтчета;
		ИначеЕсли МетаданныеОтчета.Реквизиты.Найти("ПостроительОтчета") <> Неопределено Тогда
			Построитель = ТекОтчет.ПостроительОтчета;
		ИначеЕсли ТекОтчет.СхемаКомпоновкиДанных <> Неопределено Тогда
			СхемаКомпоновкиДанных = ТекОтчет.СхемаКомпоновкиДанных;
			КомпоновщикНастроек = ТекОтчет.КомпоновщикНастроек;
		КонецЕсли;
		
		Если МетаданныеОтчета.Реквизиты.Найти("Интервал") <> Неопределено Тогда			
			Интервалы = Справочники.НастройкаИнтервалов.Выбрать();
			Если Интервалы.Следующий() Тогда
				ТекОтчет.Интервал = Интервалы.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат = "ЗадолженностьПоКонтрагентам" Тогда
			Если Объект = "дз" Тогда
				ТекОтчет.ПереключательЗадолженность = 1;	
			ИначеЕсли Объект = "кз" Тогда
				ТекОтчет.ПереключательЗадолженность = 2;
			Иначе
				ТекОтчет.ПереключательЗадолженность = 3;
			КонецЕсли;
		КонецЕсли;
		
		//------------------------------------------------заполним АНАЛИТИКА отчета------------------------------------------------
		Если Построитель <> Неопределено И МассивАналитика.Количество() > 0 Тогда
			ОчиститьТиповыеНастройки = Истина;
			Для Каждого Стр Из МассивАналитика Цикл
				СтруктураАналитики = Новый Структура;
				СтруктураАналитики.Вставить("объект", Стр);
				СтруктураАналитики.Вставить("видОбъекта", "аналитика");
				ОпределенияАналитики = СтруктураПараметров.defsAn;//ОпределениеОбъектов.НайтиСтроки(СтруктураАналитики);
				
				//цикл по разным названиям аналитики из таблицы ОпределениеОбъектов
					Для Каждого ТекАналитика Из ОпределенияАналитики Цикл
						ИмяАналитики = ТекАналитика;//.Результат;
						ИмяПоляАналитики = "";
						ПутьКДаннымАналитики = "";
							
						//попробуем найтим имя поля в таблице настроек объектов
						ТекИмяАналитики = Неопределено;
						Если НастройкиОбъекта <> Неопределено И НастройкиОбъекта.Количество() > 0
								И НастройкиОбъекта.Свойство(Стр, ТекИмяАналитики)//"ИмяПоля" + ИмяАналитики, ТекИмяАналитики)// <> Неопределено 
								И ТекИмяАналитики <> "" Тогда //НастройкиОбъекта["ИмяПоля" + ИмяАналитики] <> "" Тогда
							ИмяПоляАналитики = ТекИмяАналитики;//НастройкиОбъекта["ИмяПоля" + ИмяАналитики];
							НастройкиОбъекта.Свойство("path" + Стр, ПутьКДаннымАналитики);//ПутьКДаннымАналитики = НастройкиОбъекта["ПутьКДанным" + ИмяАналитики];
						КонецЕсли;
							
						ПолеАналитики = Построитель.ДоступныеПоля.Найти(ИмяАналитики);
						Если ПолеАналитики <> Неопределено Тогда
							ИмяПоляАналитики = ПолеАналитики.Имя;
							ПутьКДаннымАналитики = ПолеАналитики.ПутьКДанным;
						КонецЕсли;
						
						Если ИмяПоляАналитики <> "" И ПутьКДаннымАналитики <> "" Тогда
							
							
							Если Лев(ПутьКДаннымАналитики, 6) = "Период" И ПутьКДаннымАналитики <> "Период" Тогда
								Если Построитель.ИзмеренияКолонки.Найти(ИмяПоляАналитики) = Неопределено Тогда
									Построитель.ИзмеренияКолонки.Добавить(ПутьКДаннымАналитики, ИмяПоляАналитики);
								КонецЕсли;
							Иначе
								Если ОчиститьТиповыеНастройки Тогда
									Построитель.ИзмеренияСтроки.Очистить();
								КонецЕсли;
								Если Построитель.ИзмеренияСтроки.Найти(ИмяПоляАналитики) = Неопределено Тогда
									Построитель.ИзмеренияСтроки.Добавить(ПутьКДаннымАналитики, ИмяПоляАналитики);
								КонецЕсли;
							КонецЕсли;
							
							Если ОчиститьТиповыеНастройки Тогда
								//Построитель.ИзмеренияСтроки.Очистить();
								Построитель.ВыбранныеПоля.Очистить();
								ОчиститьТиповыеНастройки = Ложь;
							КонецЕсли;
							
							//Прервать;
							
						КонецЕсли;
					КонецЦикла;					
			КонецЦикла;
		КонецЕсли;
		
		//------------------------------------------------заполним ПОКАЗАТЕЛИ отчета------------------------------------------------
		
		//определения показателей из настроек объекта
		ОпределениеПоказателей = СтруктураПараметров.defsIndex;//ОпределитьПоказатели(МассивПоказатели);
		
		//если показателей нет в фразе нужно убедиться что хоть какой-то показатель в отчете отобразится
		//в противном случае используем показатели по умолчанию
		Если ОпределениеПоказателей.Количество() = 0 И НастройкиОбъекта.Количество() > 0 И СокрЛП(НастройкиОбъекта.defaultIndicators) <> "" Тогда
			ОпределениеПоказателей = РазложитьСтроку(НастройкиОбъекта.defaultIndicators, Ложь);	
		КонецЕсли;

		//если есть показатели для отображения		
		Если ОпределениеПоказателей.Количество() > 0 Тогда
			
			Если МетаданныеОтчета.Реквизиты.Найти("УниверсальныйОтчет") <> Неопределено Тогда			
				
				ОбойтиПоказателиОтчета(ТекОтчет.УниверсальныйОтчет.Показатели.Строки, ОпределениеПоказателей);//ОпределениеПоказателей);
				
			ИначеЕсли МетаданныеОтчета.Реквизиты.Найти("ОбщийОтчет") <> Неопределено Тогда	
				Для Каждого Стр Из ОпределениеПоказателей Цикл
					НайденноеПоле = Построитель.ДоступныеПоля.Найти(Стр);
					Если НайденноеПоле <> Неопределено Тогда
						Построитель.ВыбранныеПоля.Добавить(НайденноеПоле.ПутьКДанным, НайденноеПоле.Имя);
					КонецЕсли;
				КонецЦикла; 
			//	ТекОтчет.ЗаполнитьНачальныеНастройки();
			//	ТекОтчет.ОбщийОтчет.ДатаНач = ПолучитьПериод(ГодС, МесяцС, ДеньС);
			//	ТекОтчет.ОбщийОтчет.ДатаКон = ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина);
			//	Построитель = ТекОтчет.ОбщийОтчет.ПостроительОтчета;
			//Иначе
			//	Если МетаданныеОтчета.Реквизиты.Найти("ДатаНачала") <> Неопределено Тогда
			//		ТекОтчет.ДатаНачала = ПолучитьПериод(ГодС, МесяцС, ДеньС);
			//	КонецЕсли;
			//	Если МетаданныеОтчета.Реквизиты.Найти("ДатаКонца") <> Неопределено Тогда
			//		ТекОтчет.ДатаКонца = ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина);
			//	КонецЕсли;
			КонецЕсли;
			
			ОчиститьТиповыеНастройки = Истина;
			Для Каждого Стр Из МассивПоказатели Цикл
								
			КонецЦикла;	
			
		КонецЕсли;
		
		//------------------------------------------------заполним ФИЛЬТРЫ отчета по параметрам------------------------------------------------
		Если ТаблицаПараметров.Количество() > 0 Тогда
			Для Каждого ТекОтбор Из ТаблицаПараметров Цикл
				ПараметрОтбора = ТекОтбор.Параметр;
				
				//------------------
				//это нужно будет вынести в отдельную таблицу, желательно на сервере
				Если ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.Контрагенты") Тогда
					ИмяПараметра = "Контрагент";
					ИмяПараметраДоп = "";
				ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.Номенклатура") Тогда
					ИмяПараметра = "Номенклатура";
					ИмяПараметраДоп = "";
				ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					ИмяПараметра = "Номенклатура";
					ИмяПараметраДоп = "НоменклатурнаяГруппа";
				ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
					ИмяПараметра = "СтатьяДвиженияДенежныхСредств";
					ИмяПараметраДоп = "";
				Иначе
					ИмяПараметра = "";
					ИмяПараметраДоп = "";
				КонецЕсли;
				//------------------
				
				ПолеОтбора = Построитель.ДоступныеПоля.Найти(ИмяПараметра);
				Если ПолеОтбора <> Неопределено Тогда
					
					Если ИмяПараметраДоп <> "" Тогда
						Если ПолеОтбора.Поля.Найти(ИмяПараметраДоп) <> Неопределено Тогда
							ПутьКДаннымПараметра = ИмяПараметра + "." + ИмяПараметраДоп;
							ИмяПараметра = ИмяПараметра + "" + ИмяПараметраДоп;
						КонецЕсли;
					Иначе
						ПутьКДаннымПараметра = ИмяПараметра;
					КонецЕсли;

					Если Построитель.Отбор.Найти(ИмяПараметра) = Неопределено Тогда
						Построитель.Отбор.Добавить(ПутьКДаннымПараметра, ИмяПараметра, ПутьКДаннымПараметра);
					КонецЕсли;
					Построитель.Отбор[ИмяПараметра].Использование = Истина;
					Если ПараметрОтбора.ЭтоГруппа Тогда
						Построитель.Отбор[ИмяПараметра].ВидСравнения = ВидСравнения.ВИерархии;
					Иначе
						Построитель.Отбор[ИмяПараметра].ВидСравнения = ВидСравнения.Равно;
					КонецЕсли;
					Построитель.Отбор[ИмяПараметра].Значение = ПараметрОтбора;
					
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		//------------------------------------------------заполним ОТБОРЫ ПО ДОП АТРИБУТАМ------------------------------------------------
		Для Каждого СтрАтрибута Из ТаблицаДопАтрибутов Цикл
			ТекИмяАтрибута = СтрАтрибута.ИмяАтрибута; 
			//ПолеОтбора = Построитель.ДоступныеПоля.Найти(ТекИмяАтрибута);
			//Если ПолеОтбора <> Неопределено Тогда

				Если ЗначениеЗаполнено(Построитель) И Построитель.Отбор.Найти(ТекИмяАтрибута) = Неопределено Тогда
					ТекЭлементОбора = Построитель.Отбор.Добавить(ТекИмяАтрибута, ТекИмяАтрибута, ТекИмяАтрибута);
				ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда	//И КомпоновщикНастроек.Настройки.Отбор
					ТекЭлементОбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ТекЭлементОбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ТекИмяАтрибута)).Поле;
				КонецЕсли;
				//Если ЗначениеЗаполнено(Построитель) Тогда
				//	Построитель.Отбор[ТекИмяАтрибута].Использование = Истина;
				//ИначеЕсли ЗначениеЗаполнено(СхемаКомпоновкиДанных) Тогда
					ТекЭлементОбора.Использование = Истина;
				//КонецЕсли;
				
				ТекСписок = Новый СписокЗначений;
				Для Каждого СтрЗначения Из СтрАтрибута.ИмяЗначения Цикл
					Если ЗначениеЗаполнено(Построитель) Тогда
						ТипАтрибута = Построитель.Отбор[ТекИмяАтрибута].ТипЗначения.Типы()[0];
					ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда
						ТипАтрибута = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ТекИмяАтрибута)).Тип.Типы()[0];
					КонецЕсли;
					Если СтрЗначения = "&ДатаС" Тогда
						ТекСписок.Добавить(ПолучитьПериод(ГодС, МесяцС, ДеньС));
					ИначеЕсли СтрЗначения = "&ДатаПо" Тогда
						ТекСписок.Добавить(ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина));	
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипАтрибута) Тогда	//это справочник
						ИмяТипа = Метаданные.НайтиПоТипу(ТипАтрибута).Имя;
						ТекСписок.Добавить(Справочники[ИмяТипа].НайтиПоНаименованию(СтрЗначения, Истина));
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипАтрибута) Тогда	//это перечисление
						ИмяТипа = Метаданные.НайтиПоТипу(ТипАтрибута).Имя;
						ТекСписок.Добавить(Перечисления[ИмяТипа][СтрЗначения]);
					ИначеЕсли ТипАтрибута = Тип("Булево") Тогда
						ТекСписок.Добавить(Булево(СтрЗначения));
					КонецЕсли;	
				КонецЦикла;  
				
				Если СтрАтрибута.ВидСравнения = "=" Тогда
					
					Если ЗначениеЗаполнено(Построитель) Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравнения.Равно;
						ТекЭлементОбора.Значение = ТекСписок[0].Значение;
					ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						ТекЭлементОбора.ПравоеЗначение = ТекСписок[0].Значение;
					КонецЕсли;
				ИначеЕсли СтрАтрибута.ВидСравнения = ">=" Тогда
					
					Если ЗначениеЗаполнено(Построитель) Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравнения.БольшеИлиРавно;
						ТекЭлементОбора.Значение = ТекСписок[0].Значение;
					ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
						ТекЭлементОбора.ПравоеЗначение = ТекСписок[0].Значение;
					КонецЕсли;
				ИначеЕсли СтрАтрибута.ВидСравнения = "<=" Тогда
					
					Если ЗначениеЗаполнено(Построитель) Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
						ТекЭлементОбора.Значение = ТекСписок[0].Значение;
					ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
						ТекЭлементОбора.ПравоеЗначение = ТекСписок[0].Значение;
					КонецЕсли;
				ИначеЕсли СтрАтрибута.ВидСравнения = "InList" Тогда
					
					Если ЗначениеЗаполнено(Построитель) Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравнения.ВСписке;
						ТекЭлементОбора.Значение = ТекСписок;
					ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						ТекЭлементОбора.ПравоеЗначение = ТекСписок;
					КонецЕсли;
				ИначеЕсли СтрАтрибута.ВидСравнения = "<>" Тогда
					
					Если ЗначениеЗаполнено(Построитель) Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравнения.НеРавно;
						ТекЭлементОбора.Значение = ТекСписок[0].Значение;
					ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
						ТекЭлементОбора.ПравоеЗначение = ТекСписок[0].Значение;
					КонецЕсли;
				ИначеЕсли СтрАтрибута.ВидСравнения = "NotInList" Тогда
					
					Если ЗначениеЗаполнено(Построитель) Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравнения.НеВСписке;
						ТекЭлементОбора.Значение = ТекСписок;
					ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
						ТекЭлементОбора.ПравоеЗначение = ТекСписок;
					КонецЕсли;
				ИначеЕсли СтрАтрибута.ВидСравнения = "Between" Тогда
					
					Если ЗначениеЗаполнено(Построитель) Тогда
						ТекЭлементОбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
						ТекЭлементОбора.ЗначениеС = ТекСписок[0].Значение;
						ТекЭлементОбора.ЗначениеПо = ТекСписок[1].Значение;
					ИначеЕсли СхемаКомпоновкиДанных <> Неопределено Тогда
						//ТекЭлементОбора.ЛевоеЗначение = ТекСписок[0].Значение;
						//ТекЭлементОбора.ПравоеЗначение = ТекСписок[1].Значение;
					КонецЕсли;
				КонецЕсли;   					
				
			//КонецЕсли;	
			
		КонецЦикла;
		
		//------------------------------------------------заполним фильтр по СОБСТВЕННЫМ объектам (по ответственному)------------------------------------------------
		Если Построитель <> Неопределено И ОтборСобственные И МетаданныеОтчета.Реквизиты.Найти("УниверсальныйОтчет") <> Неопределено Тогда
			ТекИмяПоляИсполнитель = Неопределено;
			Если НастройкиОбъекта <> Неопределено И НастройкиОбъекта.Свойство("executor", ТекИмяПоляИсполнитель) Тогда // <> "" Тогда
				Если Построитель.Отбор.Найти(ТекИмяПоляИсполнитель) = Неопределено Тогда
					ТекПутьКДаннымИсполнитель = Неопределено;
					НастройкиОбъекта.Свойство("pathExecutor", ТекПутьКДаннымИсполнитель);
					Построитель.Отбор.Добавить(ТекПутьКДаннымИсполнитель, ТекИмяПоляИсполнитель, ТекПутьКДаннымИсполнитель);
				КонецЕсли;
				Построитель.Отбор[ТекИмяПоляИсполнитель].Использование = Истина;
				Построитель.Отбор[ТекИмяПоляИсполнитель].ВидСравнения = ВидСравнения.Равно;
				Построитель.Отбор[ТекИмяПоляИсполнитель].Значение = ТекПользователь;
			КонецЕсли;
		КонецЕсли;
		
		//------------------------------------------------заполним СОРТИРОВКУ отчета------------------------------------------------			
		Если Построитель <> Неопределено И ВидСортировки <> "" И МассивПоказатели.Количество() > 0
				И МетаданныеОтчета.Реквизиты.Найти("УниверсальныйОтчет") <> Неопределено    //отчет ВаловаяПрибыль не разрешает сортировать по прибыли
				Тогда
			//найдем имя показателя отчета по которому будем сортировать 
			ПоказательСортировки = МассивПоказатели[0];                  //например money или profit
			ТекИмяПоказательСортировки = Неопределено;
			ТекПутьСортировки = Неопределено;	
			
			//вначале ищем в настройках объекта
			Если НастройкиОбъекта <> Неопределено И НастройкиОбъекта.Количество() > 0 Тогда  
				НастройкиОбъекта.Свойство("sort" + ПоказательСортировки, ТекИмяПоказательСортировки);  //например СуммаДокумента
				НастройкиОбъекта.Свойство("sortPath" + ПоказательСортировки, ТекПутьСортировки);	
			КонецЕсли;
			
			//если нет в настройках объекта ищем в определениях показателей
			Если НЕ ЗначениеЗаполнено(ТекИмяПоказательСортировки) И ОпределениеПоказателей.Количество() > 0 Тогда
				ТекИмяПоказательСортировки = ОпределениеПоказателей[0];
				ТекПутьСортировки = ОпределениеПоказателей[0];
			КонецЕсли;
			
			//если нашли, то сортируем по нему
			Если ТекИмяПоказательСортировки <> "" Тогда
				Если Построитель.Порядок.Найти(ТекИмяПоказательСортировки) = Неопределено Тогда
					Построитель.Порядок.Добавить(ТекПутьСортировки, ТекИмяПоказательСортировки); 
				КонецЕсли;
				Если НРег(ВидСортировки) = "asc" Тогда
					Построитель.Порядок.Найти(ТекИмяПоказательСортировки).Направление = НаправлениеСортировки.Возр; 
				ИначеЕсли НРег(ВидСортировки) = "desc" Тогда
					Построитель.Порядок.Найти(ТекИмяПоказательСортировки).Направление = НаправлениеСортировки.Убыв; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//------------------------------------------------ОТКРЫВАЕМ отчет------------------------------------------------
		ПолеТабличногоДокументаРезультат = ТекФормаОтчета.ЭлементыФормы.Найти("ПолеТабличногоДокументаРезультат");
		ДокументРезультат = ТекФормаОтчета.ЭлементыФормы.Найти("ДокументРезультат");
		Если ПолеТабличногоДокументаРезультат <> Неопределено Тогда
			ТекОтчет.СформироватьОтчет(ТекФормаОтчета.ЭлементыФормы.ПолеТабличногоДокументаРезультат);
		ИначеЕсли ДокументРезультат <> Неопределено Тогда
			Если НРег(Результат) = "анализоборачиваемоститоваров" 
					ИЛИ НРег(Результат) = "валоваяприбыль"
					ИЛИ НРег(Результат) = "планыпродаж"
					ИЛИ НРег(Результат) = "планфактныйанализпродаж"
				Тогда
				
				ТекОтчет.СформироватьОтчет(ТекФормаОтчета.ЭлементыФормы.ДокументРезультат, Истина, 6);
			Иначе
				ТекОтчет.СформироватьОтчет(ТекФормаОтчета.ЭлементыФормы.ДокументРезультат);
			КонецЕсли;
		КонецЕсли;
		
	//------------------------------------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------СПИСОК объектов------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------------------------------------
	ИначеЕсли ВидРезультата = "документсписок" ИЛИ ВидРезультата = "справочниксписок" Тогда
	    СтруктураОтвета = Новый Структура;
		Если ВидРезультата = "документсписок" Тогда
			//ФормаСписка = Документы[Результат].ПолучитьФормуСписка();
			ЦелевоеИмяФормы = "Документ."+Результат+".ФормаСписка";
			СтруктураОтвета.Вставить("ИмяФормы", ЦелевоеИмяФормы);
			Возврат СтруктураОтвета;
			
			//ТекСписок = ФормаСписка.ДокументСписок;
		ИначеЕсли ВидРезультата = "справочниксписок" Тогда
			ФормаСписка = Справочники[Результат].ПолучитьФормуСписка();	
			Если Результат = "Номенклатура" Тогда
				ТекСписок = ФормаСписка.Список;
			Иначе
				ТекСписок = ФормаСписка.СправочникСписок;
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		ОтборСписка = ТекСписок.Отбор;
		Если ОтборСписка.Найти("Дата") <> Неопределено 
			//для списков отбор по дате выполняем только если она прямо указана в тексте
			И (ЗначениеЗаполнено(ГодС) ИЛИ ЗначениеЗаполнено(МесяцС) ИЛИ ЗначениеЗаполнено(ДеньС)
				ИЛИ ЗначениеЗаполнено(ГодПо) ИЛИ ЗначениеЗаполнено(МесяцПо) ИЛИ ЗначениеЗаполнено(ДеньПо))  
			Тогда
			ОтборСписка["Дата"].Использование = Истина;
			ОтборСписка["Дата"].ЗначениеС = ПолучитьПериод(ГодС, МесяцС, ДеньС);
			ОтборСписка["Дата"].ЗначениеПо = ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина);
		КонецЕсли;	
		
		//------------------------------------------------установим ФИЛЬТР по параметрам------------------------------------------------
		Для Каждого Стр ИЗ ТаблицаПараметров Цикл
			Если ТипЗнч(Стр.Параметр) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ОтборСписка.Найти("Контрагент") <> Неопределено Тогда
					ОтборСписка["Контрагент"].Использование = Истина;
					ОтборСписка["Контрагент"].Значение = Стр.Параметр;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Стр.Параметр) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
				Если ОтборСписка.Найти("КонтактноеЛицо") <> Неопределено Тогда
					ОтборСписка["КонтактноеЛицо"].Использование = Истина;
					ОтборСписка["КонтактноеЛицо"].Значение = Стр.Параметр;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//------------------------------------------------ФИЛЬТР ПО СОБСТВЕННЫМ документам------------------------------------------------
		Если ОтборСобственные Тогда
			ТекИмяИсполнитель = Неопределено;
			Если НастройкиОбъекта <> Неопределено И НастройкиОбъекта.Количество() > 0
					И НастройкиОбъекта.Свойство("executor", ТекИмяИсполнитель) 
					И ТекИмяИсполнитель <> "" Тогда
				ИмяОтбораСобственные = ТекИмяИсполнитель;
			Иначе 
				ИмяОтбораСобственные = "Ответственный";
			КонецЕсли;
			Если ОтборСписка.Найти(ИмяОтбораСобственные) <> Неопределено Тогда
				ОтборСписка[ИмяОтбораСобственные].Использование = Истина;
				ОтборСписка[ИмяОтбораСобственные].Значение = ТекПользователь;
			КонецЕсли;
		КонецЕсли;
		
		//------------------------------------------------ФИЛЬТР ПО НОМЕРУ объекта ------------------------------------------------
		Если ЗначениеЗаполнено(НомерОбъекта) Тогда
			Если ОтборСписка.Найти("Номер") <> Неопределено Тогда
				ОтборСписка["Номер"].Использование = Истина;
				ОтборСписка["Номер"].ВидСравнения = ВидСравнения.Содержит;
				ОтборСписка["Номер"].Значение = НомерОбъекта;
			КонецЕсли;
		КонецЕсли;
		
		//------------------------------------------------заполним ОТБОРЫ ПО ДОП. АТРИБУТАМ------------------------------------------------
		Для Каждого СтрАтрибута Из ТаблицаДопАтрибутов Цикл
			ТекИмяАтрибута = СтрАтрибута.ИмяАтрибута; 
			//ПолеОтбора = Построитель.ДоступныеПоля.Найти(ТекИмяАтрибута);
			//Если ПолеОтбора <> Неопределено Тогда

				Если ОтборСписка.Найти(ТекИмяАтрибута) = Неопределено Тогда
					ОтборСписка.Добавить(ТекИмяАтрибута, ТекИмяАтрибута, ТекИмяАтрибута);
				КонецЕсли;
				ОтборСписка[ТекИмяАтрибута].Использование = Истина;
				
				ТекСписок = Новый СписокЗначений;
				Для Каждого СтрЗначения Из СтрАтрибута.ИмяЗначения Цикл
					ТипАтрибута = ОтборСписка[ТекИмяАтрибута].ТипЗначения.Типы()[0];
					Если СтрЗначения = "&ДатаС" Тогда
						ТекСписок.Добавить(ПолучитьПериод(ГодС, МесяцС, ДеньС));
					ИначеЕсли СтрЗначения = "&ДатаПо" Тогда
						ТекСписок.Добавить(ПолучитьПериод(ГодПо, МесяцПо, ДеньПо, Истина));	
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипАтрибута) Тогда	//это справочник
						ИмяТипа = Метаданные.НайтиПоТипу(ТипАтрибута).Имя;
						ТекСписок.Добавить(Справочники[ИмяТипа].НайтиПоНаименованию(СтрЗначения, Истина));
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипАтрибута) Тогда	//это перечисление
						ИмяТипа = Метаданные.НайтиПоТипу(ТипАтрибута).Имя;
						ТекСписок.Добавить(Перечисления[ИмяТипа][СтрЗначения]);
					ИначеЕсли ТипАтрибута = Тип("Булево") Тогда
						ТекСписок.Добавить(Булево(СтрЗначения));
					КонецЕсли;	
				КонецЦикла;  
				
				Если СтрАтрибута.ВидСравнения = "=" Тогда
					ОтборСписка[ТекИмяАтрибута].ВидСравнения = ВидСравнения.Равно;
					ОтборСписка[ТекИмяАтрибута].Значение = ТекСписок[0].Значение;
				ИначеЕсли СтрАтрибута.ВидСравнения = "InList" Тогда
					ОтборСписка[ТекИмяАтрибута].ВидСравнения = ВидСравнения.ВСписке;
					ОтборСписка[ТекИмяАтрибута].Значение = ТекСписок;
				ИначеЕсли СтрАтрибута.ВидСравнения = "<>" Тогда
					ОтборСписка[ТекИмяАтрибута].ВидСравнения = ВидСравнения.НеРавно;
					ОтборСписка[ТекИмяАтрибута].Значение = ТекСписок[0].Значение;
				ИначеЕсли СтрАтрибута.ВидСравнения = "NotInList" Тогда
					ОтборСписка[ТекИмяАтрибута].ВидСравнения = ВидСравнения.НеВСписке;
					ОтборСписка[ТекИмяАтрибута].Значение = ТекСписок;
				ИначеЕсли СтрАтрибута.ВидСравнения = "Between" Тогда
					ОтборСписка[ТекИмяАтрибута].ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
					ОтборСписка[ТекИмяАтрибута].ЗначениеС = ТекСписок[0].Значение;
					ОтборСписка[ТекИмяАтрибута].ЗначениеПо = ТекСписок[1].Значение;
				КонецЕсли;   					
				
			//КонецЕсли;	
			
		КонецЦикла;
			
		ФормаСписка.Открыть();
		
	//------------------------------------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------ОБЪЕКТ------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------------------------------------
	ИначеЕсли ВидРезультата = "документ" ИЛИ ВидРезультата = "справочник" ИЛИ ВидРезультата = "обработка" Тогда
		ТекОбъект = Неопределено;
		Если ВидРезультата = "документ" Тогда
			ТекОбъект = Документы[Результат].СоздатьДокумент();
			МетаданныеОбъекта = ТекОбъект.Метаданные();
			
			//------------------------------------------------заполним документ ПАРАМЕТРАМИ------------------------------------------------
			Для Каждого Стр ИЗ ТаблицаПараметров Цикл
				Если ТипЗнч(Стр.Параметр) = Тип("СправочникСсылка.Контрагенты") И МетаданныеОбъекта.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
					ТекОбъект.Контрагент = Стр.Параметр;
				ИначеЕсли ТипЗнч(Стр.Параметр) = Тип("СправочникСсылка.Номенклатура") И МетаданныеОбъекта.Реквизиты.Найти("Товары") <> Неопределено Тогда
					НовСтр = ТекОбъект.Товары.Добавить();
					НовСтр.Номенклатура = Стр.Параметр;
				ИначеЕсли ТипЗнч(Стр.Параметр) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") И МетаданныеОбъекта.Реквизиты.Найти("КонтактноеЛицо") <> Неопределено Тогда
					ТекОбъект.КонтактноеЛицо = Стр.Параметр;
					Если МетаданныеОбъекта.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
						ТекОбъект.Контрагент = Стр.Параметр.Владелец;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВидРезультата = "справочник" Тогда
			
			//если есть параметр справочник такого же типа как результат, то откроем форму этого элемента
			Если ФразаДействие <> "create" Тогда
				Для Каждого Стр ИЗ ТаблицаПараметров Цикл
					ИмяТипаПараметра = Метаданные.НайтиПоТипу(ТипЗнч(Стр.Параметр)).Имя;
					Если ИмяТипаПараметра = Результат Тогда
						//ТекОбъект = Стр.Параметр.ПолучитьОбъект();	
						ТекОбъект = Стр.Параметр;
						МетаданныеОбъекта = ТекОбъект.Метаданные();
						Прервать;		
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//если создаем новый объект
			Если ТекОбъект = Неопределено ИЛИ ФразаДействие = "create" Тогда
				ТекОбъект = Справочники[Результат].СоздатьЭлемент();
				МетаданныеОбъекта = ТекОбъект.Метаданные();
				//------------------------------------------------заполним справочник ПАРАМЕТРАМИ------------------------------------------------
				Для Каждого Стр ИЗ ТаблицаПараметров Цикл
					
					НайденНеобходимыйПараметр = Ложь;
					//в первую очередь попробуем заполнить ожидаемые параметры
					Счетчик = 0;
					Пока Счетчик < МассивНеобходимыхПараметров.Количество() Цикл
						НеобходимыйПараметр = МассивНеобходимыхПараметров[Счетчик]; 
						Если МетаданныеОбъекта.Реквизиты.Найти(НеобходимыйПараметр) <> Неопределено 
								И ТипЗнч(Стр.Параметр) = ТипЗнч(ТекОбъект[НеобходимыйПараметр]) Тогда
							ТекОбъект[НеобходимыйПараметр] = Стр.Параметр;
							МассивНеобходимыхПараметров.Удалить(Счетчик);
							НайденНеобходимыйПараметр = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ НайденНеобходимыйПараметр Тогда  //если необходимый параметр не подобрали, то пробуем заполнить обычные
						Если ТипЗнч(Стр.Параметр) = Тип("СправочникСсылка.Контрагенты") И МетаданныеОбъекта.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
							ТекОбъект.Контрагент = Стр.Параметр;
						ИначеЕсли ТипЗнч(Стр.Параметр) = Тип("СправочникСсылка.пп_Задачи") И Стр.Параметр.ВидЗадачи = Перечисления.пп_ВидыЗадач.Проект 
								И МетаданныеОбъекта.Реквизиты.Найти("Проект") <> Неопределено Тогда
							ТекОбъект.Проект = Стр.Параметр;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			
			
		ИначеЕсли ВидРезультата = "обработка" Тогда
			
			ТекОбъект = Обработки[Результат].Создать();
			МетаданныеОбъекта = ТекОбъект.Метаданные();
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		//------------------------------------------------заполним ДОП. АТРИБУТЫ------------------------------------------------
		Если ВидРезультата = "документ" ИЛИ ФразаДействие = "create" Тогда	//атрибутами заполняем только новые объекты
			Для Каждого СтрАтрибута Из ТаблицаДопАтрибутов Цикл
				ТипАтрибута = ТипЗнч(ТекОбъект[СтрАтрибута.ИмяАтрибута]);
				ИмяТипа = Метаданные.НайтиПоТипу(ТипАтрибута).Имя;
				Если Справочники.ТипВсеСсылки().СодержитТип(ТипАтрибута) Тогда	//это справочник
					ТекОбъект[СтрАтрибута.ИмяАтрибута] = Справочники[ИмяТипа].НайтиПоНаименованию(СтрАтрибута.ИмяЗначения[0], Истина);
				ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипАтрибута) Тогда	//это перечисление
					ТекОбъект[СтрАтрибута.ИмяАтрибута] = Перечисления[ИмяТипа][СтрАтрибута.ИмяЗначения[0]];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//ФормаОбъекта = ТекОбъект.ПолучитьФорму();
		//	
		//ФормаОбъекта.Открыть();	
		
		Возврат ТекОбъект;
		
	//------------------------------------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------если чего-то не хватает попробуем задать ВОПРОС------------------------------------------------	
	//------------------------------------------------------------------------------------------------------------------------------------------------
	ИначеЕсли ВидРезультата = "вопрос" Тогда
		//ЭлементыФормы.Надпись16.Заголовок = Результат;
	КонецЕсли;	
	
КонецФункции

//из параметром год, месяц и день возвращает Дату
//параметро КонецПериода нужен чтобы найти последний день месяца
Функция ПолучитьПериод(ТекГод, ТекМесяц, ТекДень, КонецПериода = Ложь)  
	Если КонецПериода Тогда
		ГодПериода = ?(ЗначениеЗаполнено(ТекГод), ТекГод, Год(ТекущаяДата()));
		МесяцПериода = ?(ЗначениеЗаполнено(ТекМесяц), ТекМесяц, Месяц(ТекущаяДата()));
		Возврат КонецДня(Дата( ГодПериода,		//год
				МесяцПериода,		//месяц
				?(ЗначениеЗаполнено(ТекДень), ТекДень, ПоследнийДеньМесяца(МесяцПериода, ГодПериода))		//день
			));
	Иначе
		Возврат Дата( ?(ЗначениеЗаполнено(ТекГод), ТекГод, Год(ТекущаяДата())),		//год
			?(ЗначениеЗаполнено(ТекМесяц), ТекМесяц, Месяц(ТекущаяДата())),		//месяц
			?(ЗначениеЗаполнено(ТекДень), ТекДень, 1)		//день
		);
	КонецЕсли;
	
КонецФункции           

//раскладывает строку на массив слов, разделиетль пробел
//возвращает массив слов
Функция РазложитьСтроку(Знач СтрокаАдресов, ВНижнийРегистр = Истина) Экспорт
	МассивАдресов = Новый Массив;
	ТекИндекс = 0;
	МаксСч = СтрДлина(СтрокаАдресов);
	
	Сч1 = ?(Найти(СтрокаАдресов, " ") = 0, МаксСч, Найти(СтрокаАдресов, " "));
	Сч2 = ?(Найти(СтрокаАдресов, ",") = 0, МаксСч, Найти(СтрокаАдресов, ","));
	Сч3 = ?(Найти(СтрокаАдресов, ";") = 0, МаксСч, Найти(СтрокаАдресов, ";"));
	Пока Мин(Сч1, Сч2, Сч3) < МаксСч Цикл
		Адрес = Лев(СтрокаАдресов, Мин(Сч1, Сч2, Сч3)-1);
		Если Не ПустаяСтрока(Адрес) Тогда
			ТекСтрока = СокрЛП(?(ВНижнийРегистр, НРег(Адрес), Адрес));
			МассивАдресов.Добавить(ТекСтрока);
			//АнализироватьТекст(ТекСтрока, ТекИндекс);
			//ТекИндекс = ТекИндекс + 1;
		КонецЕсли;
		СтрокаАдресов = Сред(СтрокаАдресов, Мин(Сч1, Сч2, Сч3)+1); 
		Сч1 = ?(Найти(СтрокаАдресов, " ") = 0, МаксСч, Найти(СтрокаАдресов, " "));
		Сч2 = ?(Найти(СтрокаАдресов, ",") = 0, МаксСч, Найти(СтрокаАдресов, ","));
		Сч3 = ?(Найти(СтрокаАдресов, ";") = 0, МаксСч, Найти(СтрокаАдресов, ";"));  
	КонецЦикла;
	Если Не ПустаяСтрока(СтрокаАдресов) Тогда 
		ТекСтрока = СокрЛП(?(ВНижнийРегистр, НРег(СтрокаАдресов), СтрокаАдресов));
		МассивАдресов.Добавить(ТекСтрока);
		//АнализироватьТекст(ТекСтрока, ТекИндекс);
	КонецЕсли;
	Возврат МассивАдресов;
КонецФункции

//КЛИЕНТ
//разибраем строку доп. атрибутов и заполняем их в таблицу
Процедура ЗаполнитьТаблицуДопАтрибутов(Знач СтрокаДопАтрибутов)
	
	ТаблицаДопАтрибутов = ДанныеФормыВЗначение(Объект.ТаблицаДопАтрибутов, Тип("ТаблицаЗначений"));
	
	ТаблицаДопАтрибутов.Очистить();
	
	Пока СтрДлина(СтрокаДопАтрибутов) > 0 Цикл
		ПозицияРазделителя = Найти(СтрокаДопАтрибутов, " ");	
		Если ПозицияРазделителя > 0 Тогда
			ИмяДопАтрибута = СокрЛП(Сред(СтрокаДопАтрибутов, 1, ПозицияРазделителя - 1));
			СтрокаДопАтрибутов = Прав(СтрокаДопАтрибутов, СтрДлина(СтрокаДопАтрибутов) - ПозицияРазделителя);
		Иначе
			ЗначениеВДанныеФормы(ТаблицаДопАтрибутов, Объект.ТаблицаДопАтрибутов);
			Возврат;
		КонецЕсли;
		
		ПозицияРазделителя = Найти(СтрокаДопАтрибутов, " ");	
		Если ПозицияРазделителя > 0 Тогда
			ВидСравненияДопАтрибута = СокрЛП(Сред(СтрокаДопАтрибутов, 1, ПозицияРазделителя - 1));
			СтрокаДопАтрибутов = Прав(СтрокаДопАтрибутов, СтрДлина(СтрокаДопАтрибутов) - ПозицияРазделителя);
		Иначе
			ЗначениеВДанныеФормы(ТаблицаДопАтрибутов, Объект.ТаблицаДопАтрибутов);
			Возврат;
		КонецЕсли;
		
		ПозицияРазделителя = Найти(СтрокаДопАтрибутов, ";");
		Если ПозицияРазделителя > 0 Тогда
			ЗначениеДопАтрибута = СокрЛП(Сред(СтрокаДопАтрибутов, 1, ПозицияРазделителя - 1));
			СтрокаДопАтрибутов = СокрЛП(Прав(СтрокаДопАтрибутов, СтрДлина(СтрокаДопАтрибутов) - ПозицияРазделителя));
		Иначе
			ЗначениеДопАтрибута = СокрЛП(СтрокаДопАтрибутов);
			СтрокаДопАтрибутов = "";
		КонецЕсли;
		
		МассивЗначений = Новый Массив;
		Если НРег(ВидСравненияДопАтрибута) = "between" Тогда
			ЗначениеДопАтрибута = СтрЗаменить(ЗначениеДопАтрибута, " AND ", ",");
		КонецЕсли;
		Пока СтрДлина(ЗначениеДопАтрибута) > 0 Цикл
			ПозицияРазделителя = Найти(ЗначениеДопАтрибута, ",");
			Если ПозицияРазделителя > 0 Тогда
				НовЗначение = СокрЛП(Сред(ЗначениеДопАтрибута, 1, ПозицияРазделителя - 1));
				ЗначениеДопАтрибута = Прав(ЗначениеДопАтрибута, СтрДлина(ЗначениеДопАтрибута) - ПозицияРазделителя);
			Иначе
				НовЗначение = СокрЛП(ЗначениеДопАтрибута);
				ЗначениеДопАтрибута = "";
			КонецЕсли;
			МассивЗначений.Добавить(НовЗначение);
		КонецЦикла;

		Если ИмяДопАтрибута <> "" И ВидСравненияДопАтрибута <> "" И МассивЗначений.Количество() > 0 Тогда
			НовСтр = ТаблицаДопАтрибутов.Добавить();	
			НовСтр.ИмяАтрибута 	= ИмяДопАтрибута;
			НовСтр.ВидСравнения	= ВидСравненияДопАтрибута;
			НовСтр.ИмяЗначения	= МассивЗначений;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТаблицаДопАтрибутов, Объект.ТаблицаДопАтрибутов);
	
КонецПроцедуры

//КЛИЕНТ
//обходим строки дерева показателей отчета и определяем их использование
Процедура ОбойтиПоказателиОтчета(Строки, ОпределениеПоказателей)
	Для каждого Строка из Строки Цикл
		Если ОпределениеПоказателей.Найти(Строка.Имя) <> Неопределено Тогда
			Строка.Использование = 1;
			ОбойтиРодителейПоказателяОтчета(Строка.Родитель);
		Иначе
			Строка.Использование = 0;
		КонецЕсли;
			
		ОбойтиПоказателиОтчета(Строка.Строки, ОпределениеПоказателей);
	КонецЦикла; 
КонецПроцедуры

//КЛИЕНТ
Процедура ОбойтиРодителейПоказателяОтчета(Родитель)
	Если Родитель <> Неопределено Тогда
		Родитель.Использование = 1;
		ОбойтиРодителейПоказателяОтчета(Родитель.Родитель);
	КонецЕсли;
	
КонецПроцедуры

//КЛИЕНТ
//по номеру месяца и года определяет номер последнего дня месяца
Функция ПоследнийДеньМесяца(НомерМесяца, НомерГода) Экспорт 
	
	Если НомерМесяца > 12 Или НомерМесяца < 1 Тогда 
		Возврат 1;
	КонецЕсли;
	
	НомерДня = День(КонецМесяца(Дата(НомерГода, НомерМесяца, 1)));
	Возврат НомерДня;
	
	//Если НомерМесяца = 1
	//		ИЛИ НомерМесяца = 3
	//		ИЛИ НомерМесяца = 5
	//		ИЛИ НомерМесяца = 7
	//		ИЛИ НомерМесяца = 8
	//		ИЛИ НомерМесяца = 10
	//		ИЛИ НомерМесяца = 12 Тогда
	//	Возврат 31;
	//ИначеЕсли НомерМесяца = 4
	//		ИЛИ НомерМесяца = 6
	//		ИЛИ НомерМесяца = 9
	//		ИЛИ НомерМесяца = 11 Тогда
	//	Возврат 30;
	//ИначеЕсли НомерМесяца = 2 Тогда
	//	Если Цел(НомерГода/4) = НомерГода/4 Тогда
	//		Возврат 29;
	//	Иначе
	//		Возврат 28;
	//	КонецЕсли;
	//Иначе
	//	Возврат 1;
	//КонецЕсли;
		
	
КонецФункции
